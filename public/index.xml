<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on Staring at R</title>
    <link>/</link>
    <description>Recent content in Homepage on Staring at R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 24 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R Studio &amp; Coding Environment</title>
      <link>/introduction-to-r/01_r-studio-and-the-coding-environment/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/introduction-to-r/01_r-studio-and-the-coding-environment/</guid>
      <description>IntroductionThis module will provide an introduction into the R statisitical environment, going through the basics of data analysis and graphing for publication quality results.By the end of this module, you should be able to:
Understand and use the R studio working environmentImport and manipulate data filesUndertake linear (ANOVA, regression) and generalised linear (logistic regression) models and associated assumptions/comparisonsUndertake basic multivariate techniques (PCA, MDS)Construct bar plots and scatterplots in ggplotWhat is R?</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>/data-exploration-and-manipulation/1_packages/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/1_packages/</guid>
      <description>Now that you have setup your R environment and read in your first data set, we can begin to modify and add to our data as necessary.
Now for the majority of this module, we will be working with a package called Tidyverse. Packages are collections of data, R functions and complied code to add extra features outside of the general base R environment. Packages are central to expanding the possibilities of R.</description>
    </item>
    
    <item>
      <title>Setting up your workspace</title>
      <link>/introduction-to-r/02_setting-up-your-workspace/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/introduction-to-r/02_setting-up-your-workspace/</guid>
      <description>There are very quick ways to open R and begin coding, however, having an organised, well-structured working directory in your computer can save you hours of hassle and make your code much easier to share. As biology and data science are becoming increasingly complex many are turning to computer intensive, coding based software (like you!). With this movement in data science and open access, having our code reproducible, transparent and understandable is key.</description>
    </item>
    
    <item>
      <title>Creating a project and notebook</title>
      <link>/introduction-to-r/03_creating-a-project-and-notebook/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/introduction-to-r/03_creating-a-project-and-notebook/</guid>
      <description>Now that we have our folder setup, lets move into R studio and create our project.
The first step when opening a new R studio environment is creating a script or notebook for working in. Scripts are basic text files where all code is executable. Writing non-code in a script requires the use of #’s (which can look messy and confusing) like so:
read.csv(&amp;quot;datafile.csv&amp;quot;) # this code reads a csv (data) file into R.</description>
    </item>
    
    <item>
      <title>Importing Data</title>
      <link>/introduction-to-r/04_importing-data/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/introduction-to-r/04_importing-data/</guid>
      <description>Now that we have successfully have a notebook and appropriate working directory, we can start to read in data.
The first thing with R is that working with normal excel files is quite difficult. So we always work with comma separated values or .CSV files. When saving an excel sheet, just save as and select .csv (comma delimited) as the file type. note: .csv’s can only save a single sheet, not the whole excel workbook</description>
    </item>
    
    <item>
      <title>Viewing your data</title>
      <link>/data-exploration-and-manipulation/2_viewingdata/</link>
      <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/2_viewingdata/</guid>
      <description>Now we have become acquainted with our working directories and the R environment, its time to explore our newely imported data. For this, we will be using the weeds dataset.Ensure your data is loaded in and then either use the View() command:
weeds &amp;lt;- read.csv(&amp;quot;weeds.csv&amp;quot;)View(weeds)# This will open up a new tab to view your dataor click the variable name in the environment window.
This should bring up a separate tab in Rstudio which you should be able to see the 4 columns (weeds, soil, species &amp;amp; flowers.</description>
    </item>
    
    <item>
      <title>Columns</title>
      <link>/data-exploration-and-manipulation/3_columns/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/3_columns/</guid>
      <description>Another important aspect of R coding syntax is refering to specific columns. This is done by using a $ sign after specifying our dataset and then calling the column. Like so:
head(weeds$flowers.m3) # This says to run the head() command but only on the flowers.m3 column## [1] 14 17 23 26 35 45Try this with some of the other commands above. Note: Some of them will not work and will show NULL.</description>
    </item>
    
    <item>
      <title>The Rename Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/1_rename/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/1_rename/</guid>
      <description>By now, if you are like me, you are probably getting annoyed at writing “flowers.m3” or “species.richness” everytime you need to refer to one of those columns. This will happen ALOT with data you enter or obtain from others, as R converts any spaces to fullstops and people tend to capitilise most words. The rename() function allows us to simply rename a column name within our data frame.
Personally, this is my favourite function in R as I hate captials, fullstops and other annoying column name problems that slow down coding or generate errors.</description>
    </item>
    
    <item>
      <title>The Mutate Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/2_mutate/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/2_mutate/</guid>
      <description>One of the most common data manipulations is adding a new column to your dataset. This is great for transforming data, while also keeping the original. This could be used to combine multiple columns into one or perform mathematical calculations involving multiple columns with the results in a separate column.
We will start out with a few simple methods in base R, and then move to the dplyr method.
##Log Transformation##weeds$log_flowers &amp;lt;- log(weeds$flowers) # Base Rweeds &amp;lt;- mutate(weeds, log_flowers = log(flowers)) # Dplyr# Each of these creates a new column which is the log of the flowers column.</description>
    </item>
    
    <item>
      <title>The Filter Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/3_filter/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/3_filter/</guid>
      <description>The filter() command is used to remove rows from your data. This can be useful for removing zeros or “no data/NA’s”, or for restricting certain variables in a dataset for an analysis.
This follows the similar syntax as mutate() whereby we specify what dataset we want to filter, followed by how we want to filter.
#The following examples will just keep overwriting the new object &amp;quot;weeds_filtered&amp;quot;weeds_filtered &amp;lt;- filter(weeds, weeds == &amp;quot;native&amp;quot;) # Gives us only the rows which are exactly &amp;quot;native&amp;quot; in the weeds column.</description>
    </item>
    
    <item>
      <title>The Select Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/4_select/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/4_select/</guid>
      <description>The select() function is used to select specific columns within your data and save them as a new data frame. You can use this if you have a large dataset and only want to use a few of the columns, to keep it simple and tidy. Or, you may want to take a column or two from multiple different datasets and combine them.
weeds_select &amp;lt;- select(weeds, soil) This simply creates the weeds_select dataset, seleting one column - “soil”.</description>
    </item>
    
    <item>
      <title>Joining Data</title>
      <link>/data-exploration-and-manipulation/manipulating-data/5_joins/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/5_joins/</guid>
      <description>One of the most frequent data manipulations for working within R is joining multiple data sets together. The most common example of this is combining species abundance (or some other variable of interest) with external sources on the environmental conditions, such as BOM data (temperature, precipitation etc.) or GPS data.
To do most statistical analyses, data needs to be in the same data frame. So joining the datasets is an “easy” way to do so outside of excel.</description>
    </item>
    
    <item>
      <title>Removing Items</title>
      <link>/data-exploration-and-manipulation/manipulating-data/6_remove/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/6_remove/</guid>
      <description>By now, we have quite a few objects in our R environment that aren’t being used. The remove() command does exactly that….removes objects from the R environment. This helps for making things nice and tidy, specifically in our environment window.
remove(frogfull, froginner, enviro_filter) # Removes all three objects we just generatedUse this in the console to “one off” remove an item.
… that’s all, NEXT!</description>
    </item>
    
    <item>
      <title>Analysis of Variance</title>
      <link>/statistical-analysis/analysis-of-variance/1_aov/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/1_aov/</guid>
      <description>The first step for conducting an ANOVA in R is to create an ANOVA object. There are two ways of doing this, using the lm() command, and using the aov() command. For simplicity we will be using the aov() command now, but we will get to the lm() object later.
By using the aov() command, we can create an object that tells summary(), plot() or any other commands that the object is specifically for an ANOVA and as such, will be treated as one.</description>
    </item>
    
    <item>
      <title>The Summarise Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/7_summarise/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/7_summarise/</guid>
      <description>This is an extremely useful function that lets you create different summaries of columns. You can also nest other functions within it to apply them to your columns.
sum_data &amp;lt;- summarise(weeds, mean(flowers)) # We&amp;#39;ll start simple. Generates the mean of the flower columnsum_data &amp;lt;- summarise(group_by(weeds, species), mean(flowers)) # Using the group_by() function within summarise lets you get summaries for groups, in this case &amp;quot;species&amp;quot;sum_data &amp;lt;- summarise(group_by(weeds,species, soil), mean(flowers), sd(flowers), se=sd(flowers/sqrt(n())))# Grouped by with species &amp;amp; soil, generating mean, standard deviation &amp;amp; standard error of flowersThe last example generates the mean, sd and se for each factor combination in our dataset.</description>
    </item>
    
    <item>
      <title>The Pipe Function</title>
      <link>/data-exploration-and-manipulation/manipulating-data/8_pipe/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/data-exploration-and-manipulation/manipulating-data/8_pipe/</guid>
      <description>This lets you run multiple different functions on one dataset without having to use the intermediate steps you would have to use in base R.
You start with the data you want to apply the functions to, followed by a pipe %&amp;gt;%. After each pipe you must go to the next line.
This is useful for large messy functions with multiple nested parts. It separates everything out and makes it easier to follow.</description>
    </item>
    
    <item>
      <title>Normality</title>
      <link>/statistical-analysis/analysis-of-variance/assumptions/1_normality/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/assumptions/1_normality/</guid>
      <description>Normality can be tested in two basic ways. Through visual inspection of residuals in a normal quantile (QQ) plot and histogram, OR, through a mathematical test such as a shapiro-wilks test.
To produce the two graphs for visual inspection of residuals we use the following commands:
plot(weeds.aov, 2) # Normal quantile plotThe normal qq plot should display the residuals along the dotted line in a straight manner. In this example, it is pretty straight :)</description>
    </item>
    
    <item>
      <title>Homogeneity of Variance</title>
      <link>/statistical-analysis/analysis-of-variance/assumptions/2_homogeneity/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/assumptions/2_homogeneity/</guid>
      <description>Homogeneity of variance is the other main assumption we are concerned with when conducting an ANOVA. Homogeneity of variance is the assumption that the variance between groups is relatively even. That is to say, all groups have similar variation between them. Similar to the assumption of normality, there are two ways to test homogeneity, a visual inspection of residuals and a statistical test.
To conduct a visual inspection of the residuals we simply use the following:</description>
    </item>
    
    <item>
      <title>Viewing results</title>
      <link>/statistical-analysis/analysis-of-variance/3_anovaresults/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/3_anovaresults/</guid>
      <description>Once we know our data is normal and we have our aov() object, we can use one of two commands on this object to generate our statistical result. The normal way to do so is to use the anova() command.
anova(weeds.aov) # run an anova on the object## Analysis of Variance Table## ## Response: flowers## Df Sum Sq Mean Sq F value Pr(&amp;gt;F) ## species 2 2368.6 1184.</description>
    </item>
    
    <item>
      <title>Two-factor ANOVAs</title>
      <link>/statistical-analysis/analysis-of-variance/4_twofactors/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/4_twofactors/</guid>
      <description>To conduct an two-factor ANOVA is pretty straightforward.
weeds.aov2 &amp;lt;- aov(flowers ~ species + soil, data = weeds) # two-factor anova (without interaction)summary(weeds.aov2)## Df Sum Sq Mean Sq F value Pr(&amp;gt;F) ## species 2 2369 1184.3 9.272 0.000436 ***## soil 1 239 238.5 1.867 0.178720 ## Residuals 44 5620 127.7 ## ---## Signif. codes: 0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1This example constructs an ANOVA with two factors, but does not include the interaction term.</description>
    </item>
    
    <item>
      <title>Tukeys HSD</title>
      <link>/statistical-analysis/analysis-of-variance/5_tukeys/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/analysis-of-variance/5_tukeys/</guid>
      <description>All of our analyses so far have showed us that species has an influence on flower abundance. But without conducting an extra test, we cannot be certain which species are statistically significant from each other when it comes to their effect on flower abundance
TukeyHSD(weeds.aov) ## Tukey multiple comparisons of means## 95% family-wise confidence level## ## Fit: aov(formula = flowers ~ species, data = weeds)## ## $species## diff lwr upr p adj## Olearia-Coprosma 12.</description>
    </item>
    
    <item>
      <title>Linear Regression</title>
      <link>/statistical-analysis/6_linearregession/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/6_linearregession/</guid>
      <description>Linear regression is one of the most highly used statistical techniques in all of life and earth sciences. It is used to model the relationship between a response (Y) variable and a explanatory (X) variable. A linear regression is a special case of a linear model whereby both the response and explanatory variables are continuous. The ANOVA we just conducted is still considered as a linear model since the response variable is a linear (additive) combination of the effects of the explanatory variables.</description>
    </item>
    
    <item>
      <title>Generalised linear models (GLM&#39;s)</title>
      <link>/statistical-analysis/7_glms/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/statistical-analysis/7_glms/</guid>
      <description>So far, we have been using linear models which assume that our response variable is continuous. In earth and life sciences (ecology in particular) we are often working with discrete data, such as count data and binomial (presence/absence) data.
The linear models we have been using so far have been assuming a normal (or gaussian) distribution in our data. Generalised linear models (GLMs) allow us to fit alternative distributions to our data in order to more accurately analyse them.</description>
    </item>
    
    <item>
      <title>The Grammar of ggplot2</title>
      <link>/the-grammar-of-graphics/1_ggplotgrammar/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/1_ggplotgrammar/</guid>
      <description>By now you should be fairly familiar with the R environment and decently familiar with tidyverse. You should be able to perform basic data manipulations, analyses and in general, understand the general concepts of working with data in R.
To me personally, data visualisation is the funnest part of data science. Being able to visually communicate your findings in new and interesting ways is exciting and a joy when you have so many ways to customise your message.</description>
    </item>
    
    <item>
      <title>Basic plots</title>
      <link>/the-grammar-of-graphics/2_basicplots/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/2_basicplots/</guid>
      <description>To start, we will use the iris dataset that is built into tidyverse/ggplot2. To view the dataset, use the View() command like so:
View(iris)Once we have this, let’s setup a basic boxplot of some of the features of iris.
The iris dataset is built into tidyverse/ggplot2. The dataset is a pretty famous dataset by Edgar Anderson that gives the sepal length, width and petal length and width for three species of iris (n=50).</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>/the-grammar-of-graphics/themes/3_themes/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/3_themes/</guid>
      <description>The easiest way to quickly modify your graph is to add one of the preset theme() commands. I will add each of them to the graph which will replace the previous theme.
We can simply add items to our current graph object by adding the + sign. Keep in mind that if you dont “resave” it to the object, it wont stick around. If you want to keep a theme, either add it into the original ggplot command, or save it to the same or a new object.</description>
    </item>
    
    <item>
      <title>Axis lines</title>
      <link>/the-grammar-of-graphics/themes/5_axislines/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/5_axislines/</guid>
      <description>To change the axis lines and ticks (lines above each number on an axis) use the following.
Theme argumentDescriptionaxis.line = element_line(insert changes here)This will change both axes lines.axis.line.x = element_line(insert changes here)This will change just the x axis.axis.line.y = element_line(insert changes here)This will change just the y axis.axis.ticks = element_line(insert changes here)Change both axes ticks.</description>
    </item>
    
    <item>
      <title>Background</title>
      <link>/the-grammar-of-graphics/themes/4_gridsbackground/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/4_gridsbackground/</guid>
      <description>The plot and legend background colours can be changed using the following:
Theme argumentDescriptionpanel.background = element_rect(insert changes here)This changes the background of the main plot itself. We need element_rect() as it is a rectangle geometric object.legend.background = element_rect(insert changes here)This will change the main area of the legend.legend.key = element_rect(insert changes here)This will change the small boxes that each of the factors levels are identified with.</description>
    </item>
    
    <item>
      <title>Grids</title>
      <link>/the-grammar-of-graphics/themes/6_grids/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/6_grids/</guid>
      <description>So far, our graph does not have the original ggplot grid lines because we removed them in our original graph. Before we start changing these, let’s save our beautiful masterpiece to an object/variable to simplify the theme() changing.
iris.scatter &amp;lt;- iris.scatter + theme(panel.background = element_rect(fill=&amp;quot;lavender&amp;quot;, colour=&amp;quot;red&amp;quot;), legend.background = element_rect(fill=&amp;quot;lavender&amp;quot;, colour=&amp;quot;yellow&amp;quot;, size=1), legend.key = element_rect(fill = &amp;quot;gray50&amp;quot;, colour = &amp;quot;green&amp;quot;, size = 0.5)) +theme(axis.line.x = element_line(colour = &amp;quot;skyblue&amp;quot;, size=2), axis.line.y = element_line(colour=&amp;quot;deeppink&amp;quot;, size = 2), axis.</description>
    </item>
    
    <item>
      <title>Axis labels</title>
      <link>/the-grammar-of-graphics/themes/7_axislabels/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/7_axislabels/</guid>
      <description>If we want to change the axis labels themselves, this is done using the labs() command.
iris.scatter &amp;lt;- iris.scatter + labs(x = &amp;quot;Sepal Length (cm)&amp;quot;, y = &amp;quot;Petal Length (cm)&amp;quot;)iris.scatterIf we wish to add a title to our plot (not overly common in publications) we can use the following.
iris.scatter &amp;lt;- iris.scatter + labs(title= &amp;quot;Relationship between petal and sepal length&amp;quot;) iris.scatterAfter trying to use these labs() commands you will start to realise it hates anything slightly symbolic (subscript, superscript, degrees etc.</description>
    </item>
    
    <item>
      <title>Proper examples</title>
      <link>/the-grammar-of-graphics/themes/8_properexamples/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/themes/8_properexamples/</guid>
      <description>## Setting up the graph environment ##iris.scatter.proper &amp;lt;- ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, colour=Species, shape=Species)) + geom_point()## Making our theme ##plottheme &amp;lt;- theme(panel.background = element_rect(fill=&amp;quot;ghostwhite&amp;quot;),legend.background = element_blank(),legend.key = element_rect(fill=&amp;quot;ghostwhite&amp;quot;),axis.line = element_line(colour=&amp;quot;black&amp;quot;, size=1),axis.ticks = element_blank(),axis.title = element_text(colour=&amp;quot;royalblue3&amp;quot;, size=14),plot.title = element_text(face=&amp;quot;bold&amp;quot;, colour=&amp;quot;steelblue4&amp;quot;, size=16),legend.title = element_text(colour=&amp;quot;royalblue3&amp;quot;, size=14),legend.text = element_text(face=&amp;quot;italic&amp;quot;, colour=&amp;quot;steelblue4&amp;quot;, size=10),axis.text = element_text(colour=&amp;quot;steelblue4&amp;quot;, size=12),panel.grid.major = element_line(colour=&amp;quot;gray80&amp;quot;),panel.grid.minor = element_blank())## Applying the theme, adding some labels and changing some colours ##iris.</description>
    </item>
    
    <item>
      <title>Basic bar plots</title>
      <link>/the-grammar-of-graphics/bar-plots/1_barplots/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/bar-plots/1_barplots/</guid>
      <description>For this section, we will be using the weeds dataset where we performed a two-factor ANOVA
 For a quick reminder:
weeds.aov2 &amp;lt;- aov(flowers ~ species * soil, data = weeds)anova(weeds.aov2)## Analysis of Variance Table## ## Response: flowers## Df Sum Sq Mean Sq F value Pr(&amp;gt;F) ## species 2 2368.6 1184.31 9.1016 0.0005203 ***## soil 1 238.5 238.52 1.8331 0.1830080 ## species:soil 2 155.0 77.52 0.</description>
    </item>
    
    <item>
      <title>Bar graphs - part 2</title>
      <link>/the-grammar-of-graphics/bar-plots/2_barplot2/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/bar-plots/2_barplot2/</guid>
      <description>In the last example, we plotted a single column graph. To plot multiple columns, for example a soil by species interaction, is quite simple.
Firstly, we will run our summarise command, adding the soil column into our group_by() command to generate the means and standard error for the soil, species combinations.
weeds.summarise2 &amp;lt;- weeds %&amp;gt;% group_by(species, soil) %&amp;gt;%summarise(mean = mean(flowers), se=sd(flowers/sqrt(n())))We plot multiple columns by specifying one column in our x axis, and filling/colouring by another.</description>
    </item>
    
    <item>
      <title>Errorbars</title>
      <link>/the-grammar-of-graphics/bar-plots/3_errorbars/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/bar-plots/3_errorbars/</guid>
      <description>Error bars are a simply addition to your graph, utilising their own geometric command geom_errorbar().To add the error bars, we use the following command
ggplot(weeds.summarise, aes(x=species, y=mean)) +geom_bar(stat=&amp;quot;identity&amp;quot;)+geom_errorbar(aes(ymin = mean-se, ymax = mean+se))This is suprisingly simple. All we do is specify the aesthetic (aes) where we compute our minimum and maximum y values for our bars as our mean column +/- our standard error column.
We can further customise our errorbars through the use of a few arguments.</description>
    </item>
    
    <item>
      <title>Significant notation</title>
      <link>/the-grammar-of-graphics/bar-plots/4_tukeys/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/bar-plots/4_tukeys/</guid>
      <description>When presenting our results to an audience (paper or presentation) it is important to communicate our results clearly in a manner that is understandable to a wider audience. Tha main way to do so with an Analysis of Variance, is using a post-hoc test like a Tukeys Honest Significant Difference (Tukeys HSD). This will analyse the differences between the levels within a factor to distinguish which levels are significantly different from one another.</description>
    </item>
    
    <item>
      <title>Finalising our Barplot</title>
      <link>/the-grammar-of-graphics/bar-plots/5_finalising/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/bar-plots/5_finalising/</guid>
      <description>Thats the general process for setting up a column graph for ANOVA data. It can take some time, but we get alot of freedom in how we present this.
Let’s spruce up our graph to a finalised form, before we save it to an image file.
weeds.bar &amp;lt;- ggplot(weeds.summarise, aes(x=species, y=mean, fill=species))+geom_bar(stat=&amp;quot;identity&amp;quot;, show.legend=F, colour=&amp;quot;black&amp;quot;)+labs(x=&amp;quot;Weed Species&amp;quot;, y= expression(Flowers~(m^3)))+theme(panel.background = element_blank(), panel.grid = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;, size=1), axis.</description>
    </item>
    
    <item>
      <title>Scatter plots</title>
      <link>/the-grammar-of-graphics/scatter-plots/1_scatterplot/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/scatter-plots/1_scatterplot/</guid>
      <description>For this section, we will be using the tadpoles.csv data set
 The second dataset we analysed tadpole abundance in different sized ponds using a linear model/regression. Plotting linear regressions is really straightforward, but can be done a couple of different ways, depending on what you wish to accomplish.
First, let’s run the basic analysis again (excluding the reeds factor).
tadpoles.lm &amp;lt;- lm(abundance ~ pondsize, data = tadpoles)summary(tadpoles.lm)## ## Call:## lm(formula = abundance ~ pondsize, data = tadpoles)## ## Residuals:## Min 1Q Median 3Q Max ## -73.</description>
    </item>
    
    <item>
      <title>Linear Lines</title>
      <link>/the-grammar-of-graphics/scatter-plots/2_plottinglines/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/scatter-plots/2_plottinglines/</guid>
      <description>To produce a line on our graph, the easiest solution is using geom_smooth(method=lm). geom_smooth() by default will produce a loess smooth through our graph with confidence intervals. Since we have run a linear model, we specify the method of the geometric shape to fit that of a linear model (lm).
ggplot(tadpoles, aes(x=pondsize, y=abundance)) +geom_point(alpha = 0.5)+geom_smooth(method=lm)method=lm tells the smooth line to plot a linear relationship between the variables in the graph environment.</description>
    </item>
    
    <item>
      <title>Logistic regression</title>
      <link>/the-grammar-of-graphics/scatter-plots/3_logisticregression/</link>
      <pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/the-grammar-of-graphics/scatter-plots/3_logisticregression/</guid>
      <description>For this section, we will be using the nestpredation.csv data set
 In our third dataset, we analysed the nest predation dataset using a generalised linear model with a binomial distribution, also known as a Logistic Regression.
In this scenario, our data is measuring whether a nest was attacked or not in areas of different shrubcover. When we analyse this using a GLM, it is calculating the probability of a nest being attacked, given different values of shrubcover.</description>
    </item>
    
    <item>
      <title></title>
      <link>/datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/datasets/</guid>
      <description>Example datasets provided courtesy of Professor Kristine French
  Data Sets   frog_environmental.csv  (2 ko)   frogs.csv  (1 ko)   insecticide.csv  (0 ko)   nestpredation.csv  (0 ko)   site.csv  (0 ko)   tadpoles.csv  (0 ko)   weeds.csv  (1 ko)    </description>
    </item>
    
  </channel>
</rss>